name: node-feature-discovery

on:
  push:
    paths:
      - '.github/workflows/node-feature-discovery.yml'
      - 'build/node-feature-discovery/**'
      - '!build/node-feature-discovery/*.md'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: $(cat build/node-feature-discovery/.version)
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          BASE_DIR=build/node-feature-discovery
          VERSION=$(cat ${BASE_DIR}/.version)
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=base_dir::${BASE_DIR}

      - name: Checkout node-feature-discovery repo
        uses: actions/checkout@v2
        with:
          repository: kubernetes-sigs/node-feature-discovery
          path: node-feature-discovery

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: amd64,arm64,arm

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Container Image - Git Reference
        if: github.ref != 'refs/heads/master'
        run: |
          docker buildx build --build-arg=VERSION=$${ env.VERSION }} \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --target full \
            --build-arg=HOSTMOUNT_PREFIX=/host- \
            --build-arg BASE_IMAGE_FULL="debian:buster-slim" \
            --build-arg BASE_IMAGE_MINIMAL="gcr.io/distroless/base" \
            --tag raspbernetes/node-feature-discovery:${{ github.sha }} \
            --file ./node-feature-discovery/Dockerfile \
            ./node-feature-discovery/ \
            --output "type=image,push=true"
          docker buildx build --build-arg=VERSION=$${ env.VERSION }} \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --target minimal \
            --build-arg=HOSTMOUNT_PREFIX=/host- \
            --build-arg BASE_IMAGE_FULL="debian:buster-slim" \
            --build-arg BASE_IMAGE_MINIMAL="gcr.io/distroless/base" \
            --tag raspbernetes/node-feature-discovery:${{ github.sha }}-minimal \
            --file ./node-feature-discovery/Dockerfile \
            ./node-feature-discovery/ \
            --output "type=image,push=true"

      - name: Build Container Image - Release
        if: github.ref == 'refs/heads/master'
        run: |
          docker buildx build --build-arg=VERSION=$${ env.VERSION }} \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --target full \
            --build-arg=HOSTMOUNT_PREFIX=/host- \
            --build-arg BASE_IMAGE_FULL="debian:buster-slim" \
            --build-arg BASE_IMAGE_MINIMAL="gcr.io/distroless/base" \
            --tag k8sathome/node-feature-discovery:latest \
            --tag raspbernetes/node-feature-discovery:${{ env.VERSION }} \
            --tag k8sathome/node-feature-discovery:${{ env.VERSION }} \
            --file ./node-feature-discovery/Dockerfile \
            ./node-feature-discovery/ \
            --output "type=image,push=true"
          docker buildx build --build-arg=VERSION=$${ env.VERSION }} \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --target minimal \
            --build-arg=HOSTMOUNT_PREFIX=/host- \
            --build-arg BASE_IMAGE_FULL="debian:buster-slim" \
            --build-arg BASE_IMAGE_MINIMAL="gcr.io/distroless/base" \
            --tag k8sathome/node-feature-discovery:latest-minimal \
            --tag raspbernetes/node-feature-discovery:${{ env.VERSION }}-minimal \
            --tag k8sathome/node-feature-discovery:${{ env.VERSION }}-minimal \
            --file ./node-feature-discovery/Dockerfile \
            ./node-feature-discovery/ \
            --output "type=image,push=true"
